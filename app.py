import streamlit as st
import pandas as pd
import os
from datetime import datetime
from io import BytesIO

# =======================
# CONFIG G√âN√âRALE
# =======================
st.set_page_config(
    page_title="Choix des mati√®res - D√©partement G√©nie Civil",
    page_icon="üèóÔ∏è",
    layout="wide",
)

DATA_DIR = os.getenv("DATA_PATH", "data")
MATIERES_FILE = os.path.join(DATA_DIR, "matieres_all.csv")
SOUMISSIONS_FILE = os.path.join(DATA_DIR, "soumissions.csv")
ADMIN_PASS = os.getenv("ADMIN_PASS", "")  # d√©finis sur Render si tu veux prot√©ger l‚Äôadmin

os.makedirs(DATA_DIR, exist_ok=True)

# =======================
# UTILS
# =======================
@st.cache_data
def load_matieres():
    if os.path.exists(MATIERES_FILE):
        df = pd.read_csv(MATIERES_FILE).fillna("")
    else:
        df = pd.DataFrame(columns=["course_code","course_title","level_code","track_code","ec_type"])
    return df

@st.cache_data
def load_soumissions():
    if os.path.exists(SOUMISSIONS_FILE):
        return pd.read_csv(SOUMISSIONS_FILE).fillna("")
    # squelette si vide
    cols = ["nom","prenom","email","niveau","parcours","matiere","priorite","remarques","date_soumission"]
    return pd.DataFrame(columns=cols)

def save_soumissions(df_new: pd.DataFrame):
    if os.path.exists(SOUMISSIONS_FILE):
        old = pd.read_csv(SOUMISSIONS_FILE)
        final = pd.concat([old, df_new], ignore_index=True)
    else:
        final = df_new
    final.to_csv(SOUMISSIONS_FILE, index=False)

def to_excel_bytes(**sheets):
    bio = BytesIO()
    with pd.ExcelWriter(bio, engine="xlsxwriter") as writer:
        for name, df in sheets.items():
            df.to_excel(writer, index=False, sheet_name=name[:31] or "Sheet1")
    bio.seek(0)
    return bio

# =======================
# SIDEBAR
# =======================
matieres_df = load_matieres()
st.sidebar.header("Navigation")
mode = st.sidebar.radio("Mode", ["Enseignant", "Admin"])

# =======================
# MODE ENSEIGNANT (NOUVELLE VERSION MULTI-NIVEAUX)
# =======================
if mode == "Enseignant":
    st.title("üéì Plateforme de choix des mati√®res")
    st.caption("D√©partement de G√©nie Civil")

    # --- Identit√© ---
    st.header("üë©‚Äçüè´ Informations personnelles")
    c1, c2 = st.columns(2)
    with c1:
        nom = st.text_input("Nom")
    with c2:
        prenom = st.text_input("Pr√©nom")
    email = st.text_input("Adresse e-mail universitaire (facultatif)")

    st.divider()

    if matieres_df.empty:
        st.warning("‚ö†Ô∏è `data/matieres_all.csv` est introuvable ou vide.")
        st.stop()

    # --- Filtres multi-niveaux / multi-parcours ---
    st.subheader("üéöÔ∏è Filtres d'affichage")
    niveaux_all = sorted(matieres_df["level_code"].dropna().unique().tolist())
    niveaux_sel = st.multiselect("üìò Niveaux √† inclure (1 mati√®re min. par niveau exig√©e)",
                                 options=niveaux_all, default=niveaux_all)

    # Parcours propos√©s = ceux pr√©sents dans les niveaux choisis
    parcours_all = sorted(
        matieres_df[matieres_df["level_code"].isin(niveaux_sel)]["track_code"].dropna().unique().tolist()
    )
    parcours_sel = st.multiselect("üéØ Parcours √† inclure", options=parcours_all, default=parcours_all)

    # Types d'EC (optionnel)
    ec_types_all = sorted(matieres_df["ec_type"].dropna().unique().tolist())
    ec_types_sel = st.multiselect("üß© Types d'EC (facultatif)", options=ec_types_all, default=ec_types_all)

    # Dataset filtr√© global (multi-niveaux)
    filtr√© = matieres_df[
        matieres_df["level_code"].isin(niveaux_sel)
        & matieres_df["track_code"].isin(parcours_sel)
        & matieres_df["ec_type"].isin(ec_types_sel)
    ][["course_code", "course_title", "level_code", "track_code", "ec_type"]].copy()

    if filtr√©.empty:
        st.info("Aucune mati√®re pour ce filtre.")
        st.stop()

    st.subheader(f"üìö Catalogue filtr√© ({len(filtr√©)})")
    st.dataframe(filtr√©, use_container_width=True, hide_index=True)

    st.markdown("---")
    st.subheader("‚úÖ S√©lection & priorit√©s")

    # Tableau √©ditable avec case √† cocher + priorit√©
    work = filtr√©.copy()
    work["Choisir"] = False
    work["Priorit√©"] = None

    edited = st.data_editor(
        work,
        use_container_width=True,
        hide_index=True,
        num_rows="fixed",
        column_config={
            "Choisir": st.column_config.CheckboxColumn("Choisir"),
            "Priorit√©": st.column_config.NumberColumn(
                "Priorit√©", min_value=1, step=1,
                help="Classement 1 = priorit√© maximale. Les priorit√©s doivent √™tre uniques."
            ),
        },
    )

    # Remarques EDT
    remarque = st.text_area(
        "üìù Recommandations / Remarques / Pr√©f√©rences EDT",
        placeholder="Ex. : √©viter lundi matin ; pr√©f√©rence TD L3 ; bin√¥me souhait√©‚Ä¶",
        height=120,
    )

    MIN_TOTAL = 8  # r√®gle globale

    # --- Validation ---
    chosen = edited[edited["Choisir"] == True].copy()
    erreurs = []

    # total ‚â• 8
    if len(chosen) < MIN_TOTAL:
        erreurs.append(f"Vous devez choisir au moins **{MIN_TOTAL} mati√®res** (actuellement {len(chosen)}).")

    # ‚â• 1 par niveau s√©lectionn√©
    for lvl in niveaux_sel:
        if lvl not in chosen["level_code"].unique():
            erreurs.append(f"Aucune mati√®re s√©lectionn√©e pour le niveau **{lvl}** (min. 1 requise).")

    # priorit√©s renseign√©es et uniques
    if not chosen["Priorit√©"].notna().all():
        erreurs.append("Renseignez une **priorit√©** pour chaque mati√®re s√©lectionn√©e.")
    else:
        prios = chosen["Priorit√©"].astype(int).tolist()
        if len(set(prios)) != len(prios):
            erreurs.append("Les **priorit√©s doivent √™tre uniques** (1, 2, 3, ‚Ä¶).")

    # --- Enregistrement ---
    if st.button("üíæ Enregistrer mes choix", type="primary"):
        if not nom.strip() or not prenom.strip():
            st.error("Veuillez renseigner votre nom et votre pr√©nom.")
            st.stop()
        if erreurs:
            st.error("Veuillez corriger :\n- " + "\n- ".join(erreurs))
            st.stop()

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        lignes = []
        chosen = chosen.sort_values("Priorit√©")
        for _, r in chosen.iterrows():
            lignes.append({
                "nom": nom,
                "prenom": prenom,
                "email": email,
                "niveau": r["level_code"],
                "parcours": r["track_code"],
                "matiere": r["course_title"],
                "priorite": int(r["Priorit√©"]),
                "remarques": remarque,
                "date_soumission": now,
            })
        df_new = pd.DataFrame(lignes)
        save_soumissions(df_new)

        st.success("‚úÖ Vos choix ont √©t√© enregistr√©s.")
        st.download_button(
            "üì• T√©l√©charger mon r√©capitulatif (CSV)",
            data=df_new.to_csv(index=False).encode("utf-8"),
            file_name=f"choix_{nom}_{prenom}.csv",
            mime="text/csv",
        )
